{
  "_args": [
    [
      {
        "raw": "zomato",
        "scope": null,
        "escapedName": "zomato",
        "name": "zomato",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\nightlife\\server"
    ]
  ],
  "_from": "zomato@latest",
  "_id": "zomato@1.1.0",
  "_inCache": true,
  "_location": "/zomato",
  "_nodeVersion": "4.2.6",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/zomato-1.1.0.tgz_1471175431947_0.26631213491782546"
  },
  "_npmUser": {
    "name": "ritishgumber",
    "email": "ritishgumber@gmail.com"
  },
  "_npmVersion": "2.14.12",
  "_phantomChildren": {},
  "_requested": {
    "raw": "zomato",
    "scope": null,
    "escapedName": "zomato",
    "name": "zomato",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/zomato/-/zomato-1.1.0.tgz",
  "_shasum": "6f9d25375406c119812edad8e042c45a17932f8a",
  "_shrinkwrap": null,
  "_spec": "zomato",
  "_where": "D:\\nightlife\\server",
  "author": {
    "name": "Ritish Gumber"
  },
  "bugs": {
    "url": "https://github.com/ritishgumber/zomato/issues"
  },
  "dependencies": {
    "request": "^2.74.0"
  },
  "description": "node.js wrapper for Zomato API",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "6f9d25375406c119812edad8e042c45a17932f8a",
    "tarball": "https://registry.npmjs.org/zomato/-/zomato-1.1.0.tgz"
  },
  "gitHead": "599522e76aa6f38a4c5257ca39aa83e1445a4d34",
  "homepage": "https://github.com/ritishgumber/zomato#readme",
  "keywords": [
    "zomato",
    "api",
    "zomato-api",
    "node-zomato",
    "node",
    "nodejs",
    "node.js"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "ritishgumber",
      "email": "ritishgumber@gmail.com"
    }
  ],
  "name": "zomato",
  "optionalDependencies": {},
  "readme": "# zomato\n\n[![NPM](https://nodei.co/npm/zomato.png?mini=true)](https://nodei.co/npm/zomato/)\n\nnpm package for [Zomato API](https://developers.zomato.com/apis)\n\n## Installation\nInstall using npm:\n```sh\nnpm install zomato\n```\n\n## Usage\nRequire library\n```javascript\nvar zomato = require('zomato');\n```\nCreate client\n```javascript\nvar client = zomato.createClient({\n  userKey: 'API Token', //as obtained from [Zomato API](https://developers.zomato.com/apis)\n});\n```\n## Get a list of categories. List of all restaurants categorized under a particular restaurant type can be obtained using /Search API with Category ID as inputs.\n```javascript\nclient.getCategories(null, function(err, result){\n    if(!err){\n      console.log(result);\n    }else {\n      console.log(err);\n    }\n});\n```\n##Find the Zomato ID and other details for a city . You can obtain the Zomato City ID in one of the following ways -\n - City Name in the Search Query - Returns list of cities matching the query\n - Using coordinates - Identifies the city details based on the coordinates of any location inside a city\n## If you already know the Zomato City ID, this API can be used to get other details of the city\n```javascript\nclient.getCities({\nq:\"New Delhi\", //query by city name\nlat:\"28.613939\", //latitude\nlon:\"77.209021\", //longitude\ncity_ids:\"1,2,3\", //comma separated city_ids value\ncount:\"2\" // number of maximum result to display\n}, function(err, result){\n    if(!err){\n      console.log(result);\n    }else {\n      console.log(err);\n    }\n});\n```\n##Returns Zomato Restaurant Collections in a City. The location/City input can be provided in the following ways -\n - Using Zomato City ID\n - Using coordinates of any location within a city\n## List of all restaurants listed in any particular Zomato Collection can be obtained using the '/search' API with Collection ID and Zomato City ID as the input.\n```javascript\nclient.getCollections({\ncity_id:\"1\", //id of the city for which collections are needed\nlat:\"28.613939\", //latitude\nlon:\"77.209021\", //longitude\ncount:\"2\" // number of maximum result to display\n}, function(err, result){\n    if(!err){\n      console.log(result);\n    }else {\n      console.log(err);\n    }\n});\n```\n##Get a list of all cuisines of restaurants listed in a city. The location/city input can be provided in the following ways -\n -Using Zomato City ID\n -Using coordinates of any location within a city\n##List of all restaurants serving a particular cuisine can be obtained using '/search' API with cuisine ID and location details\n```javascript\nclient.getCuisines({\ncity_id:\"1\", //id of the city for which collections are needed\nlat:\"28.613939\", //latitude\nlon:\"77.209021\" //longitude\n}, function(err, result){\n    if(!err){\n      console.log(result);\n    }else {\n      console.log(err);\n    }\n});\n```\n##Get a list of restaurant types in a city. The location/City input can be provided in the following ways -\n -Using Zomato City ID\n -Using coordinates of any location within a city\n##List of all restaurants categorized under a particular restaurant type can obtained using /Search API with Establishment ID and location details as inputs\n```javascript\nclient.getEstablishments({\ncity_id:\"1\", //id of the city for which collections are needed\nlat:\"28.613939\", //latitude\nlon:\"77.209021\" //longitude\n}, function(err, result){\n    if(!err){\n      console.log(result);\n    }else {\n      console.log(err);\n    }\n});\n```\n##Get Foodie and Nightlife Index, list of popular cuisines and nearby restaurants around the given coordinates\n```javascript\nclient.getGeocode({\nlat:\"28.613939\", //latitude\nlon:\"77.209021\" //longitude\n}, function(err, result){\n    if(!err){\n      console.log(result);\n    }else {\n      console.log(err);\n    }\n});\n```\n##Get Foodie Index, Nightlife Index, Top Cuisines and Best rated restaurants in a given location\n```javascript\nclient.getLocationDetails({\nentity_id:\"36932\", //location id obtained from locations api\nentity_type:\"group\" //location type obtained from locations api\n}, function(err, result){\n    if(!err){\n      console.log(result);\n    }else {\n      console.log(err);\n    }\n});\n```\n## Search for Zomato locations by keyword. Provide coordinates to get better search results\n```javascript\nclient.getLocations({\nquery:\"New Delhi\", // suggestion for location name\nlat:\"28.613939\", //latitude\nlon:\"77.209021\", //longitude\ncount:\"2\" // number of maximum result to fetch\n}, function(err, result){\n    if(!err){\n      console.log(result);\n    }else {\n      console.log(err);\n    }\n});\n```\n## Search for Zomato locations by keyword. Provide coordinates to get better search results\n```javascript\nclient.getDailyMenu({\nres_id:\"9186\" // id of restaurant whose details are requested\n}, function(err, result){\n    if(!err){\n      console.log(result);\n    }else {\n      console.log(err);\n    }\n});\n```\n## Get detailed restaurant information using Zomato restaurant ID. Partner Access is required to access photos and reviews.\n```javascript\nclient.getRestaurant({\nres_id:\"9186\" // id of restaurant whose details are requested\n}, function(err, result){\n    if(!err){\n      console.log(result);\n    }else {\n      console.log(err);\n    }\n});\n```\n## Get restaurant reviews using the Zomato restaurant ID\n```javascript\nclient.getReviews({\nres_id:\"9186\" , // id of restaurant whose details are requested\nstart : \"0\" , //fetch results after this offset (Integer)\ncount: \"5\" , max number of results to retrieve\n\n}, function(err, result){\n    if(!err){\n      console.log(result);\n    }else {\n      console.log(err);\n    }\n});\n```\n## The location input can be specified using Zomato location ID or coordinates. Cuisine / Establishment / Collection IDs can be obtained from respective api calls. Partner Access is required to access photos and reviews.\n##Examples - \n - To search for 'Italian' restaurants in 'Manhattan, New York City', set cuisines = 55, entity_id = 94741 and entity_type = zone\n - To search for 'cafes' in 'Manhattan, New York City', set establishment_type = 1, entity_type = zone and entity_id = 94741\n - Get list of all restaurants in 'Trending this Week' collection in 'New York City' by using entity_id = 280, entity_type = city and collection_id = 1\n```javascript\nclient.search({\nentity_id:\"36932\",//location id\nentity_type:\"group\", // location type (city,subzone,zone , landmark, metro,group)\nq:\"Cafe\" ,//Search Keyword\nlat:\"28.613939\", //latitude\nlon:\"77.209021\", //longitude\ncount:\"2\", // number of maximum result to display\nstart:\"1\" , //fetch results after offset\nradius:\"10000\" , //radius around (lat,lon); to define search area, defined in meters(M)\ncuisines : \"3,7\" , //list of cuisine id's separated by comma\nestablishment_type : \"\" , //estblishment id obtained from establishments call\ncollection_id : \"29\" , //collection id obtained from collections call\ncategory :  \"9\" ,//\tcategory ids obtained from categories call\nsort : \" cost,rating,real_distance\" ,//choose any one out of these available choices\norder: \"asc\" //\tused with 'sort' parameter to define ascending(asc )/ descending(desc)\n\n}, function(err, result){\n    if(!err){\n      console.log(result);\n    }else {\n      console.log(err);\n    }\n});\n```",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ritishgumber/zomato.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.1.0"
}
